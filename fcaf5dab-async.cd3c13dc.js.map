{"version":3,"sources":["node_modules/@ant-design/pro-components/node_modules/@ant-design/pro-form/es/components/Checkbox/index.js","src/pages/Login/index.tsx"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"options\", \"fieldProps\", \"proFieldProps\", \"valueEnum\"];\nimport { runFunction } from '@ant-design/pro-utils';\nimport { Checkbox } from 'antd';\nimport React from 'react';\nimport { createField } from \"../../BaseForm/createField\";\nimport ProFormField from \"../Field\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar CheckboxGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var options = _ref.options,\n    fieldProps = _ref.fieldProps,\n    proFieldProps = _ref.proFieldProps,\n    valueEnum = _ref.valueEnum,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/_jsx(ProFormField, _objectSpread({\n    ref: ref,\n    valueType: \"checkbox\",\n    valueEnum: runFunction(valueEnum, undefined),\n    fieldProps: _objectSpread({\n      options: options\n    }, fieldProps),\n    lightProps: _objectSpread({\n      labelFormatter: function labelFormatter() {\n        return /*#__PURE__*/_jsx(ProFormField, _objectSpread({\n          ref: ref,\n          valueType: \"checkbox\",\n          mode: \"read\",\n          valueEnum: runFunction(valueEnum, undefined),\n          filedConfig: {\n            customLightMode: true\n          },\n          fieldProps: _objectSpread({\n            options: options\n          }, fieldProps),\n          proFieldProps: proFieldProps\n        }, rest));\n      }\n    }, rest.lightProps),\n    proFieldProps: proFieldProps\n  }, rest));\n});\n/**\n * 多选框的\n *\n * @param\n */\nvar ProFormCheckboxComponents = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {\n  var fieldProps = _ref2.fieldProps,\n    children = _ref2.children;\n  return /*#__PURE__*/_jsx(Checkbox, _objectSpread(_objectSpread({\n    ref: ref\n  }, fieldProps), {}, {\n    children: children\n  }));\n});\nvar ProFormCheckbox = createField(ProFormCheckboxComponents, {\n  valuePropName: 'checked'\n});\nvar WrappedProFormCheckbox = ProFormCheckbox;\nWrappedProFormCheckbox.Group = CheckboxGroup;\nexport default WrappedProFormCheckbox;","import { LoginForm, ProFormCheckbox, ProFormText } from '@ant-design/pro-components';\nimport { FormattedMessage, Helmet, history, SelectLang, useIntl, useModel } from '@umijs/max';\nimport { Alert, Card, message, Space, Tabs, Typography } from 'antd';\nimport { createStyles } from 'antd-style';\nimport React, { useState } from 'react';\nimport { flushSync } from 'react-dom';\nimport Settings from '../../../config/defaultSettings';\nimport { login } from './service';\n\nconst { Title, Text, Link } = Typography;\n\nconst useStyles = createStyles(({ token }) => ({\n  action: {\n    marginLeft: '8px',\n    color: 'rgba(0, 0, 0, 0.2)',\n    fontSize: '24px',\n    verticalAlign: 'middle',\n    cursor: 'pointer',\n    transition: 'color 0.3s',\n    '&:hover': {\n      color: token.colorPrimaryActive,\n    },\n  },\n  lang: {\n    width: 42,\n    height: 42,\n    lineHeight: '42px',\n    position: 'fixed',\n    right: 16,\n    borderRadius: token.borderRadius,\n    ':hover': {\n      backgroundColor: token.colorBgTextHover,\n    },\n  },\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100vh',\n    overflow: 'auto',\n    backgroundImage: \"url('/images/login_bg.jpg')\",\n    backgroundSize: '100% 100%',\n  },\n}));\n\nconst Lang = () => {\n  const { styles } = useStyles();\n\n  return (\n    <div className={styles.lang} data-lang>\n      {SelectLang && <SelectLang />}\n    </div>\n  );\n};\n\nconst LoginMessage: React.FC<{ content: string }> = ({ content }) => {\n  return (\n    <Alert\n      style={{\n        marginBottom: 24,\n      }}\n      message={content}\n      type=\"error\"\n      showIcon\n    />\n  );\n};\n\nconst Login: React.FC = () => {\n  const [userLoginState, setUserLoginState] = useState<Res<API.LoginResult>>({\n    code: 0,\n    message: '',\n    data: { token: '' },\n    request_id: '',\n  });\n  const { initialState, setInitialState } = useModel('@@initialState');\n  const { styles } = useStyles();\n  const intl = useIntl();\n\n  const fetchUserInfo = async () => {\n    const userInfo = await initialState?.fetchUserInfo?.();\n    if (userInfo) {\n      flushSync(() => {\n        setInitialState((s) => ({\n          ...s,\n          currentUser: userInfo,\n        }));\n      });\n    }\n  };\n\n  const handleSubmit = async (values: API.LoginParams) => {\n    // try {\n    //   // Login request\n    //   const msg = await login({ ...values });\n    //   if (msg.data) {\n    //     const successMessage = intl.formatMessage({\n    //       id: 'pages.login.success',\n    //       defaultMessage: 'Login Successful!',\n    //     });\n\n    //     //set up token\n    //     const token = msg.data.token;\n    //     localStorage.setItem('token', token);\n\n    //     //show mess\n    //     message.success(successMessage);\n    //     await fetchUserInfo();\n    //     const urlParams = new URL(window.location.href).searchParams;\n    //     history.push(urlParams.get('redirect') || '/');\n    //     return;\n    //   }\n    //   // Set user error message on failure\n    //   setUserLoginState(msg);\n    // } catch (error) {\n    //   const failureMessage = intl.formatMessage({\n    //     id: 'pages.login.failure',\n    //     defaultMessage: 'Login Failed, Please try again!',\n    //   });\n    //   console.log(error);\n    //   message.error(failureMessage);\n    // }\n\n    history.push('/');\n  };\n\n  return (\n    <div className={styles.container}>\n      <Helmet>\n        <title>\n          {intl.formatMessage({\n            id: 'menu.login',\n            defaultMessage: 'Login Page',\n          })}\n          {Settings.title && ` - ${Settings.title}`}\n        </title>\n      </Helmet>\n      {/* <Lang /> */}\n      <div>\n        <img style={{ margin: 24 }} alt=\"logo\" src=\"/logo.svg\" />\n      </div>\n      <div\n        style={{\n          flex: '1',\n          padding: '42px 0',\n          justifyContent: 'center',\n          display: 'flex',\n        }}\n      >\n        <Card style={{ maxWidth: '75vw', maxHeight: 450 }}>\n          <Title level={3} style={{ padding: '0px 32px' }}>\n            {'Đăng nhập'}\n          </Title>\n          <LoginForm\n            contentStyle={{\n              minWidth: 280,\n              maxWidth: '75vw',\n            }}\n            submitter={{\n              submitButtonProps: {\n                style: {\n                  backgroundColor: '#2563EB',\n                  width: '100%',\n                },\n              },\n            }}\n            initialValues={{\n              autoLogin: true,\n            }}\n            onFinish={async (values) => {\n              await handleSubmit(values as API.LoginParams);\n            }}\n          >\n            <>\n              <ProFormText\n                label=\"Email\"\n                name=\"email\"\n                fieldProps={{\n                  size: 'large',\n                  tabIndex: 1,\n                }}\n                placeholder={'Nhập email'}\n                required={false}\n                rules={[\n                  {\n                    required: true,\n                    message: (\n                      <FormattedMessage\n                        id=\"pages.login.username.required\"\n                        defaultMessage=\"Please enter your email!\"\n                      />\n                    ),\n                  },\n                  {\n                    type: 'email',\n                    message: 'Email sai định dạng',\n                  },\n                ]}\n              />\n              <ProFormText.Password\n                label=\"Mật khẩu\"\n                name=\"password\"\n                fieldProps={{\n                  size: 'large',\n                  tabIndex: 2,\n                }}\n                placeholder={'Nhập mật khẩu'}\n                required={false}\n                rules={[\n                  {\n                    required: true,\n                    message: (\n                      <FormattedMessage\n                        id=\"pages.login.password.required\"\n                        defaultMessage=\"Please enter your password!\"\n                      />\n                    ),\n                  },\n                ]}\n              />\n            </>\n\n            <div\n              style={{\n                marginBottom: 24,\n              }}\n            >\n              <ProFormCheckbox noStyle name=\"autoLogin\">\n                <Text strong>\n                  <FormattedMessage\n                    id=\"pages.login.rememberMe\"\n                    defaultMessage=\"Ghi nhớ tài khoản\"\n                  />\n                </Text>\n              </ProFormCheckbox>\n              <a\n                style={{\n                  float: 'right',\n                }}\n              >\n                <FormattedMessage id=\"pages.login.forgotPassword\" defaultMessage=\"Quên mật khẩu\" />\n              </a>\n            </div>\n\n            {userLoginState.code !== 0 && (\n              <LoginMessage\n                content={intl.formatMessage({\n                  id: 'pages.login.accountLogin.errorMessage',\n                  defaultMessage: 'Incorrect account or password',\n                })}\n              />\n            )}\n          </LoginForm>\n\n          <Space style={{ justifyContent: 'center', display: 'flex' }}>\n            <Text>Bạn chưa có tài khoản?</Text>\n            <Link onClick={() => history.push('/user/register')}>Đăng ký ngay</Link>\n          </Space>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n"],"names":[],"mappings":"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"}