{"version":3,"sources":["src/components/RoleTag/index.tsx","src/pages/Admin/Users/List.tsx"],"sourcesContent":["import { SYSTEM_ROLE } from '@/consants';\nimport { Tag } from 'antd';\nimport React from 'react';\n\ntype Props = {\n  role_id: number;\n};\n\nconst RoleTag: React.FC<Props> = ({ role_id }) => {\n  switch (role_id) {\n    case 1:\n      return <Tag color={'gold'}>{SYSTEM_ROLE[role_id]}</Tag>;\n    case 2:\n      return <Tag color={'cyan'}>{SYSTEM_ROLE[role_id]}</Tag>;\n    case 3:\n      return <Tag color={'default'}>{SYSTEM_ROLE[role_id]}</Tag>;\n\n    default:\n      break;\n  }\n};\n\nexport default RoleTag;\n","import usePagination from '@/hooks/usePagination';\nimport { MoreOutlined, PlusOutlined } from '@ant-design/icons';\nimport { ActionType, PageContainer, ProColumns, ProTable } from '@ant-design/pro-components';\nimport { useIntl, useModel } from '@umijs/max';\nimport {\n  Button,\n  Card,\n  DatePicker,\n  Descriptions,\n  Dropdown,\n  MenuProps,\n  message,\n  Modal,\n  Tag,\n} from 'antd';\nimport React, { useRef, useState } from 'react';\nimport { fetchList, remove, updateStatus } from './service';\nimport { ChangePasswordModal, UserModal } from './components';\nimport { SYSTEM_ROLE } from '@/consants';\nimport RoleTag from '@/components/RoleTag';\nimport { FormatInputTime, handlePageAfterDelete, RenderTime } from '@/helpers';\n\n/**\n * The Users Page displays a list of users and managed information.\n * @returns JSX Element\n */\n\nconst { RangePicker } = DatePicker;\n\nconst Page: React.FC = () => {\n  //#region set up theme\n  const { initialState } = useModel('@@initialState');\n  const getCardBackground = () =>\n    initialState?.settings?.navTheme === 'realDark'\n      ? 'linear-gradient(75deg, #1A1B1F 0%, #191C1F 100%)'\n      : 'linear-gradient(75deg, #FBFDFF 0%, #F5F7FF 100%)';\n  //#endregion\n\n  //#region set up table\n  const tableRef = useRef<ActionType>();\n  const { formatMessage } = useIntl();\n  const { paginationConfig, savePageList } = usePagination();\n\n  // console.log('props', useParams());\n\n  const columns: ProColumns<UserModule.Response>[] = [\n    {\n      title: 'No.',\n      key: 'index',\n      width: 60,\n      hideInSearch: true,\n      render: (text, record, index) => {\n        return index + 1 + (paginationConfig.current - 1) * paginationConfig.pageSize;\n      },\n    },\n\n    {\n      title: 'Username',\n      dataIndex: 'username',\n      key: 'username',\n      copyable: true,\n    },\n    {\n      title: 'Email',\n      dataIndex: 'email',\n      key: 'email',\n      copyable: true,\n    },\n    {\n      title: 'Phone Number',\n      dataIndex: 'phone_number',\n      key: 'phone_number',\n      formItemProps: {\n        labelCol: { xxl: 8 },\n      },\n    },\n\n    {\n      title: formatMessage({ id: 'component.global.status' }),\n      dataIndex: 'active',\n      key: 'active',\n      valueType: 'select',\n      fieldProps: {\n        options: [\n          { label: formatMessage({ id: 'component.global.active' }), value: true },\n          { label: formatMessage({ id: 'component.global.inactive' }), value: false },\n        ],\n      },\n      render: (_, record) => (\n        <Tag color={record.active ? 'green' : 'red'}>\n          {record.active\n            ? formatMessage({ id: 'component.global.active' })\n            : formatMessage({ id: 'component.global.inactive' })}\n        </Tag>\n      ),\n    },\n    {\n      title: 'Role',\n      dataIndex: 'role_id',\n      key: 'role_id',\n      valueType: 'select',\n      fieldProps: {\n        options: [\n          { label: SYSTEM_ROLE[1], value: 1 }, // super admin\n          { label: SYSTEM_ROLE[2], value: 2 }, // admin\n          { label: SYSTEM_ROLE[3], value: 3 }, // user\n        ],\n      },\n      render: (_, record) => <RoleTag role_id={record.role_id} />,\n    },\n\n    //TODO:\n    // {\n    //   title: '2FA Status',\n    //   dataIndex: 'twofa_status',\n    //   key: 'twofa_status',\n    //   valueType: 'select',\n    //   fieldProps: {\n    //     options: [\n    //       { label: formatMessage({ id: 'component.global.enable' }), value: true },\n    //       { label: formatMessage({ id: 'component.global.disable' }), value: false },\n    //     ],\n    //   },\n    //   render: (_, record) => (\n    //     <Tag color={record.twofa_status ? 'blue' : 'gray'}>\n    //       {record.twofa_status\n    //         ? formatMessage({ id: 'component.global.enable' })\n    //         : formatMessage({ id: 'component.global.disable' })}\n    //     </Tag>\n    //   ),\n    // },\n    {\n      title: formatMessage({ id: 'component.global.created_at' }),\n      dataIndex: 'created_at',\n      key: 'created_at',\n      valueType: 'dateTimeRange',\n      search: {\n        transform: (value: any) => ({\n          start_time: FormatInputTime(value[0]?.valueOf()),\n          end_time: FormatInputTime(value[1]?.valueOf()),\n        }),\n      },\n\n      renderFormItem: (_: any, { type, defaultRender, ...rest }) => {\n        const props = {\n          ...rest,\n          mode: undefined,\n        };\n\n        return <RangePicker showTime {...props} />;\n      },\n      render: (_: any, record: UserModule.Response) => RenderTime(record.created_at),\n    },\n\n    {\n      fixed: 'right',\n      title: formatMessage({ id: 'component.global.actions' }),\n      key: 'actions',\n      width: 80,\n      hideInSearch: true,\n      render: (_: any, record: UserModule.Response, index: number) => (\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\n          {renderActions(record, index)}\n        </div>\n      ),\n    },\n  ];\n\n  // Dropdown Menu for Actions\n  const getMenuItems = (data: UserModule.Response, index: number): MenuProps['items'] => [\n    {\n      key: 'view',\n      label: formatMessage({ id: 'component.global.view' }),\n      onClick: () => handleView(data),\n    },\n    ...(initialState?.currentUser?.role_id === 1 || // super admin can do all\n    (initialState?.currentUser?.role_id && initialState?.currentUser?.role_id < data.role_id) // data role have to be lower role to enable below action\n      ? [\n          {\n            key: 'edit',\n            label: formatMessage({ id: 'component.global.edit' }),\n            onClick: () => handleOpenEdit(data),\n          },\n\n          //do not show it if is the user loging in\n          ...(initialState?.currentUser?.id !== data.id\n            ? [\n                {\n                  key: 'reset_password',\n                  label: formatMessage({ id: 'page.admin.users.reset_password' }),\n                  onClick: () => handleOpenResetPassword(data),\n                },\n                {\n                  key: 'toggle',\n                  label: data.active\n                    ? formatMessage({ id: 'component.global.deactivate' })\n                    : formatMessage({ id: 'component.global.activate' }),\n                  onClick: () => {\n                    if (data.active) {\n                      Modal.confirm({\n                        title: `Are you sure you want to Deactivate this user?`,\n                        okText: 'Yes, Deactivate',\n                        okType: 'danger',\n                        cancelText: 'Cancel',\n                        onOk: () => {\n                          toggleActiveStatus(data.id, false);\n                        },\n                      });\n                    } else {\n                      toggleActiveStatus(data.id, true);\n                    }\n                  },\n                },\n                {\n                  key: 'delete',\n                  label: formatMessage({ id: 'component.global.delete' }),\n                  danger: true,\n                  onClick: () => handleDelete(data, index),\n                },\n              ]\n            : []),\n        ]\n      : []),\n  ];\n  const renderActions = (data: UserModule.Response, index: number) => (\n    <Dropdown menu={{ items: getMenuItems(data, index) }} trigger={['hover']}>\n      <Button icon={<MoreOutlined />} type=\"dashed\" />\n    </Dropdown>\n  );\n\n  //#endregion\n\n  //#region edit/create\n  const [modalVisible, setModalVisible] = useState(false);\n  const [editing, setEditing] = useState<UserModule.Response>();\n\n  // Open Create Modal\n  const handleOpenCreate = () => {\n    setEditing(undefined);\n    setModalVisible(true);\n  };\n\n  // Open Edit Modal\n  const handleOpenEdit = (data: UserModule.Response) => {\n    setEditing(data);\n    setModalVisible(true);\n  };\n\n  // Save or Update User\n\n  const handleSave = (data: UserModule.Response) => {\n    // console.log('data', data);\n    tableRef.current?.reload();\n    setModalVisible(false);\n  };\n  //#endregion\n\n  //#region delete\n  // Delete User\n  const handleDelete = (data: UserModule.Response, index: number) => {\n    Modal.confirm({\n      title: 'Are you sure you want to delete this data?',\n      content: `This action cannot be undone. Deleting ${data.full_name}.`,\n      okText: 'Yes, Delete',\n      okType: 'danger',\n      cancelText: 'Cancel',\n      onOk: () => {\n        remove(data.id).then(() => {\n          handlePageAfterDelete(tableRef, savePageList, index);\n          message.success('User deleted successfully!');\n        });\n      },\n    });\n  };\n  //#endregion\n\n  //#region view\n  const [viewing, setViewing] = useState<UserModule.Response>();\n  const [viewModalVisible, setViewModalVisible] = useState(false);\n\n  // Open View Modal\n  const handleView = (data: UserModule.Response) => {\n    setViewing(data);\n    setViewModalVisible(true);\n  };\n\n  //#endregion\n\n  //#region toggle active status\n  // Toggle Active Status\n  const toggleActiveStatus = (id: string, active: boolean) => {\n    updateStatus(id, active).then(() => {\n      tableRef.current?.reload();\n      message.success('Status updated successfully!');\n    });\n  };\n  //#endregion\n\n  //#region toggle active status\n  const [resetPasswordModalVisible, setResetPasswordModalVisible] = useState(false);\n\n  // Reset password\n  const handleOpenResetPassword = (data: UserModule.Response) => {\n    setEditing(data);\n    setResetPasswordModalVisible(true);\n  };\n  //#endregion\n\n  //#region final render\n  return (\n    <PageContainer>\n      <Card\n        style={{\n          borderRadius: 8,\n        }}\n        bodyStyle={{\n          backgroundImage: getCardBackground(),\n        }}\n      >\n        {/* Table */}\n        <ProTable<UserModule.Response>\n          rowKey=\"id\"\n          columns={columns}\n          actionRef={tableRef}\n          request={fetchList}\n          pagination={{\n            onChange: (page, pageSize?) => savePageList(page, pageSize),\n            pageSize: paginationConfig.pageSize,\n            current: paginationConfig.current,\n            showSizeChanger: true,\n          }}\n          search={{\n            searchText: formatMessage({ id: 'component.global.search' }),\n            resetText: formatMessage({ id: 'component.global.reset' }),\n          }}\n          toolBarRender={() => [\n            <>\n              {/* {checkPermissions('USER_CREATE_ACCOUNT') ? ( */}\n              <Button type=\"primary\" onClick={handleOpenCreate}>\n                <PlusOutlined />\n                {formatMessage({ id: 'page.admin.users.addUser' })}\n              </Button>\n              {/* ) : null} */}\n            </>,\n          ]}\n          scroll={{ x: 1100 }}\n        />\n        {/* Create/Edit Modal */}\n        <UserModal\n          visible={modalVisible}\n          onCancel={() => setModalVisible(false)}\n          onSave={handleSave}\n          data={editing}\n        />\n\n        {/* Change Password Modal */}\n        <ChangePasswordModal\n          visible={resetPasswordModalVisible}\n          mode=\"reset\"\n          onCancel={() => setResetPasswordModalVisible(false)}\n          onSave={() => setResetPasswordModalVisible(false)}\n          id={editing?.id}\n        />\n\n        {/* View User Modal */}\n        <Modal\n          open={viewModalVisible}\n          title=\"User Details\"\n          onCancel={() => setViewModalVisible(false)}\n          maskClosable={false}\n          footer={[\n            <Button key=\"close\" onClick={() => setViewModalVisible(false)}>\n              Close\n            </Button>,\n          ]}\n        >\n          {viewing && (\n            <Descriptions column={1} bordered>\n              <Descriptions.Item label=\"Full Name\">{viewing.full_name}</Descriptions.Item>\n              <Descriptions.Item label=\"Username\">{viewing.username}</Descriptions.Item>\n              <Descriptions.Item label=\"Email\">{viewing.email}</Descriptions.Item>\n              <Descriptions.Item label=\"Phone Number\">{viewing.phone_number}</Descriptions.Item>\n              <Descriptions.Item label={formatMessage({ id: 'component.global.status' })}>\n                {viewing.active ? (\n                  <Tag color=\"green\">{formatMessage({ id: 'component.global.active' })}</Tag>\n                ) : (\n                  <Tag color=\"red\">{formatMessage({ id: 'component.global.inactive' })}</Tag>\n                )}\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Role\">\n                {<RoleTag role_id={viewing.role_id} />}\n              </Descriptions.Item>\n              <Descriptions.Item label=\"2FA Status\">\n                {\n                  <Tag color={viewing.twofa_status ? 'blue' : 'gray'}>\n                    {viewing.twofa_status\n                      ? formatMessage({ id: 'component.global.enable' })\n                      : formatMessage({ id: 'component.global.disable' })}\n                  </Tag>\n                }\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Created At\">\n                {RenderTime(viewing.created_at)}\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Last Updated\">\n                {RenderTime(viewing.last_updated_at)}\n              </Descriptions.Item>\n            </Descriptions>\n          )}\n        </Modal>\n      </Card>\n    </PageContainer>\n  );\n  //#endregion\n};\n\nexport default Page;\n"],"names":[],"mappings":"qtBAQA,IAAM,EAA2B,CAAC,CAAE,QAAA,CAAO,CAAE,IAC3C,OAAQ,GACN,KAAK,EACH,MAAO,UAAC,SAAG,EAAC,MAAO,gBAAS,aAAW,CAAC,EAAQ,GAClD,KAAK,EACH,MAAO,UAAC,SAAG,EAAC,MAAO,gBAAS,aAAW,CAAC,EAAQ,GAClD,KAAK,EACH,MAAO,UAAC,SAAG,EAAC,MAAO,mBAAY,aAAW,CAAC,EAAQ,GAIvD,CACF,sBCOA,GAAM,CAAE,YAAA,CAAW,CAAE,CAAG,SAAU,CAE5B,EAAiB,SAInB,EAFF,GAAM,CAAE,aAAA,CAAY,CAAE,CAAG,GAAA,UAAQ,EAAC,kBAQ5B,EAAW,GAAA,QAAM,IACjB,CAAE,cAAA,CAAa,CAAE,CAAG,GAAA,SAAO,IAC3B,CAAE,iBAAA,CAAgB,CAAE,aAAA,CAAY,CAAE,CAAG,GAAA,SAAa,IAIlD,EAA6C,CACjD,CACE,MAAO,MACP,IAAK,QACL,MAAO,GACP,aAAc,CAAA,EACd,OAAQ,CAAC,EAAM,EAAQ,IACd,EAAQ,EAAI,AAAC,CAAA,EAAiB,OAAO,CAAG,CAAA,EAAK,EAAiB,QAAQ,AAEjF,EAEA,CACE,MAAO,WACP,UAAW,WACX,IAAK,WACL,SAAU,CAAA,CACZ,EACA,CACE,MAAO,QACP,UAAW,QACX,IAAK,QACL,SAAU,CAAA,CACZ,EACA,CACE,MAAO,eACP,UAAW,eACX,IAAK,eACL,cAAe,CACb,SAAU,CAAE,IAAK,CAAE,CACrB,CACF,EAEA,CACE,MAAO,EAAc,CAAE,GAAI,yBAA0B,GACrD,UAAW,SACX,IAAK,SACL,UAAW,SACX,WAAY,CACV,QAAS,CACP,CAAE,MAAO,EAAc,CAAE,GAAI,yBAA0B,GAAI,MAAO,CAAA,CAAK,EACvE,CAAE,MAAO,EAAc,CAAE,GAAI,2BAA4B,GAAI,MAAO,CAAA,CAAM,EAC3E,AACH,EACA,OAAQ,CAAC,EAAG,IACV,UAAC,SAAG,EAAC,MAAO,EAAO,MAAM,CAAG,QAAU,eACnC,EAAO,MAAM,CACV,EAAc,CAAE,GAAI,yBAA0B,GAC9C,EAAc,CAAE,GAAI,2BAA4B,IAG1D,EACA,CACE,MAAO,OACP,UAAW,UACX,IAAK,UACL,UAAW,SACX,WAAY,CACV,QAAS,CACP,CAAE,MAAO,aAAW,CAAC,EAAE,CAAE,MAAO,CAAE,EAClC,CAAE,MAAO,aAAW,CAAC,EAAE,CAAE,MAAO,CAAE,EAClC,CAAE,MAAO,aAAW,CAAC,EAAE,CAAE,MAAO,CAAE,EACnC,AACH,EACA,OAAQ,CAAC,EAAG,IAAW,UAAC,GAAQ,QAAS,EAAO,OAAO,EACzD,EAsBA,CACE,MAAO,EAAc,CAAE,GAAI,6BAA8B,GACzD,UAAW,aACX,IAAK,aACL,UAAW,gBACX,OAAQ,CACN,UAAW,AAAC,QACkB,EACF,QAFA,CAC1B,WAAY,GAAA,iBAAe,UAAC,EAAA,CAAK,CAAC,EAAE,YAAR,SAAA,EAAU,OAAO,IAC7C,SAAU,GAAA,iBAAe,UAAC,EAAA,CAAK,CAAC,EAAE,YAAR,SAAA,EAAU,OAAO,GAC7C,GACF,EAEA,eAAgB,CAAC,EAAQ,CAAE,KAAA,CAAI,CAAE,cAAA,CAAa,CAAE,GAAG,EAAM,IACvD,IAAM,EAAQ,CACZ,GAAG,CAAI,CACP,KAAM,KAAA,CACR,EAEA,MAAO,UAAC,GAAY,QAAQ,IAAE,GAAG,CAAK,GACxC,EACA,OAAQ,CAAC,EAAQ,IAAgC,GAAA,YAAU,EAAC,EAAO,UAAU,CAC/E,EAEA,CACE,MAAO,QACP,MAAO,EAAc,CAAE,GAAI,0BAA2B,GACtD,IAAK,UACL,MAAO,GACP,aAAc,CAAA,EACd,OAAQ,CAAC,EAAQ,EAA6B,IAC5C,UAAC,OAAI,MAAO,CAAE,QAAS,OAAQ,eAAgB,QAAS,WACrD,EAAc,EAAQ,IAG7B,EACD,CAGK,EAAe,CAAC,EAA2B,SAM3C,EACH,EAAsC,EAS7B,QAhB2E,CACrF,CACE,IAAK,OACL,MAAO,EAAc,CAAE,GAAI,uBAAwB,GACnD,QAAS,IAAM,EAAW,EAC5B,KACI,OAAA,iBAAA,EAAA,EAAc,WAAW,YAAzB,SAAA,EAA2B,OAAO,IAAK,GAC1C,OAAA,iBAAA,EAAA,EAAc,WAAW,YAAzB,SAAA,EAA2B,OAAO,GAAI,OAAA,iBAAA,EAAA,EAAc,WAAW,YAAzB,SAAA,EAA2B,OAAO,EAAG,EAAK,OAAO,CACpF,CACE,CACE,IAAK,OACL,MAAO,EAAc,CAAE,GAAI,uBAAwB,GACnD,QAAS,IAAM,EAAe,EAChC,KAGI,OAAA,iBAAA,EAAA,EAAc,WAAW,YAAzB,SAAA,EAA2B,EAAE,IAAK,EAAK,EAAE,CACzC,CACE,CACE,IAAK,iBACL,MAAO,EAAc,CAAE,GAAI,iCAAkC,GAC7D,QAAS,IAAM,EAAwB,EACzC,EACA,CACE,IAAK,SACL,MAAO,EAAK,MAAM,CACd,EAAc,CAAE,GAAI,6BAA8B,GAClD,EAAc,CAAE,GAAI,2BAA4B,GACpD,QAAS,KACH,EAAK,MAAM,CACb,SAAK,CAAC,OAAO,CAAC,CACZ,MAAO,iDACP,OAAQ,kBACR,OAAQ,SACR,WAAY,SACZ,KAAM,KACJ,EAAmB,EAAK,EAAE,CAAE,CAAA,GAC9B,CACF,GAEA,EAAmB,EAAK,EAAE,CAAE,CAAA,GAEhC,CACF,EACA,CACE,IAAK,SACL,MAAO,EAAc,CAAE,GAAI,yBAA0B,GACrD,OAAQ,CAAA,EACR,QAAS,IAAM,EAAa,EAAM,EACpC,EACD,CACD,EAAE,CACP,CACD,EAAE,CACP,GACK,EAAgB,CAAC,EAA2B,IAChD,UAAC,SAAQ,EAAC,KAAM,CAAE,MAAO,EAAa,EAAM,EAAO,EAAG,QAAS,CAAC,QAAQ,UACtE,UAAC,SAAM,EAAC,KAAM,UAAC,SAAY,KAAK,KAAK,aAOnC,CAAC,EAAc,EAAgB,CAAG,GAAA,UAAQ,EAAC,CAAA,GAC3C,CAAC,EAAS,EAAW,CAAG,GAAA,UAAQ,IAGhC,EAAmB,KACvB,EAAW,KAAA,GACX,EAAgB,CAAA,GAClB,EAGM,EAAiB,AAAC,IACtB,EAAW,GACX,EAAgB,CAAA,GAClB,EAaM,EAAe,CAAC,EAA2B,KAC/C,SAAK,CAAC,OAAO,CAAC,CACZ,MAAO,6CACP,QAAS,CAAC,uCAAuC,EAAE,EAAK,SAAS,CAAC,CAAC,CAAC,CACpE,OAAQ,cACR,OAAQ,SACR,WAAY,SACZ,KAAM,KACJ,GAAA,QAAM,EAAC,EAAK,EAAE,EAAE,IAAI,CAAC,KACnB,GAAA,uBAAqB,EAAC,EAAU,EAAc,GAC9C,SAAO,CAAC,OAAO,CAAC,8BAClB,GACF,CACF,GACF,EAIM,CAAC,EAAS,EAAW,CAAG,GAAA,UAAQ,IAChC,CAAC,EAAkB,EAAoB,CAAG,GAAA,UAAQ,EAAC,CAAA,GAGnD,EAAa,AAAC,IAClB,EAAW,GACX,EAAoB,CAAA,GACtB,EAMM,EAAqB,CAAC,EAAY,KACtC,GAAA,cAAY,EAAC,EAAI,GAAQ,IAAI,CAAC,SAC5B,UAAA,EAAA,EAAS,OAAO,YAAhB,GAAA,EAAkB,MAAM,GACxB,SAAO,CAAC,OAAO,CAAC,gCAClB,GACF,EAIM,CAAC,EAA2B,EAA6B,CAAG,GAAA,UAAQ,EAAC,CAAA,GAGrE,EAA0B,AAAC,IAC/B,EAAW,GACX,EAA6B,CAAA,GAC/B,EAIA,MACE,UAAC,eAAa,WACZ,WAAC,SAAI,EACH,MAAO,CACL,aAAc,CAChB,EACA,UAAW,CACT,gBA3RN,OAAA,iBAAA,EAAA,EAAc,QAAQ,YAAtB,SAAA,EAAwB,QAAQ,IAAK,WACjC,mDACA,kDA0RA,YAGA,UAAC,UAAQ,EACP,OAAO,KACP,QAAS,EACT,UAAW,EACX,QAAS,WAAS,CAClB,WAAY,CACV,SAAU,CAAC,EAAM,IAAc,EAAa,EAAM,GAClD,SAAU,EAAiB,QAAQ,CACnC,QAAS,EAAiB,OAAO,CACjC,gBAAiB,CAAA,CACnB,EACA,OAAQ,CACN,WAAY,EAAc,CAAE,GAAI,yBAA0B,GAC1D,UAAW,EAAc,CAAE,GAAI,wBAAyB,EAC1D,EACA,cAAe,IAAM,CACnB,+BAEE,WAAC,SAAM,EAAC,KAAK,UAAU,QAAS,YAC9B,UAAC,SAAY,KACZ,EAAc,CAAE,GAAI,0BAA2B,QAIrD,CACD,OAAQ,CAAE,EAAG,IAAK,IAGpB,UAAC,WAAS,EACR,QAAS,EACT,SAAU,IAAM,EAAgB,CAAA,GAChC,OArGW,AAAC,QAElB,UAAA,EAAA,EAAS,OAAO,YAAhB,GAAA,EAAkB,MAAM,GACxB,EAAgB,CAAA,GAClB,EAkGQ,KAAM,IAIR,UAAC,qBAAmB,EAClB,QAAS,EACT,KAAK,QACL,SAAU,IAAM,EAA6B,CAAA,GAC7C,OAAQ,IAAM,EAA6B,CAAA,GAC3C,EAAE,OAAE,SAAA,EAAS,EAAE,GAIjB,UAAC,SAAK,EACJ,KAAM,EACN,MAAM,eACN,SAAU,IAAM,EAAoB,CAAA,GACpC,aAAc,CAAA,EACd,OAAQ,CACN,UAAC,SAAM,EAAa,QAAS,IAAM,EAAoB,CAAA,YAAQ,SAAnD,SAGb,UAEA,GACC,WAAC,SAAY,EAAC,OAAQ,EAAG,QAAQ,cAC/B,UAAC,SAAY,CAAC,IAAI,EAAC,MAAM,qBAAa,EAAQ,SAAS,GACvD,UAAC,SAAY,CAAC,IAAI,EAAC,MAAM,oBAAY,EAAQ,QAAQ,GACrD,UAAC,SAAY,CAAC,IAAI,EAAC,MAAM,iBAAS,EAAQ,KAAK,GAC/C,UAAC,SAAY,CAAC,IAAI,EAAC,MAAM,wBAAgB,EAAQ,YAAY,GAC7D,UAAC,SAAY,CAAC,IAAI,EAAC,MAAO,EAAc,CAAE,GAAI,yBAA0B,YACrE,EAAQ,MAAM,CACb,UAAC,SAAG,EAAC,MAAM,iBAAS,EAAc,CAAE,GAAI,yBAA0B,KAElE,UAAC,SAAG,EAAC,MAAM,eAAO,EAAc,CAAE,GAAI,2BAA4B,OAGtE,UAAC,SAAY,CAAC,IAAI,EAAC,MAAM,gBACtB,UAAC,GAAQ,QAAS,EAAQ,OAAO,KAEpC,UAAC,SAAY,CAAC,IAAI,EAAC,MAAM,sBAErB,UAAC,SAAG,EAAC,MAAO,EAAQ,YAAY,CAAG,OAAS,gBACzC,EAAQ,YAAY,CACjB,EAAc,CAAE,GAAI,yBAA0B,GAC9C,EAAc,CAAE,GAAI,0BAA2B,OAIzD,UAAC,SAAY,CAAC,IAAI,EAAC,MAAM,sBACtB,GAAA,YAAU,EAAC,EAAQ,UAAU,IAEhC,UAAC,SAAY,CAAC,IAAI,EAAC,MAAM,wBACtB,GAAA,YAAU,EAAC,EAAQ,eAAe,cASnD"}